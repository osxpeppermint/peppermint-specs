ace.define("ace/snippets/coffee",["require","exports","module"],function(e,t,n){"use strict";
	t.snippetText="# Closure loop\nsnippet forindo\nfor ${1:name} in ${2:array}\n	do ($1) ->\n			${3:// body}\n# Array comprehension\nsnippet fora\n	for ${1:name} in ${2:array}\n		${3:// body...}\n# Object comprehension\nsnippet foro\n	for ${1:key}, ${2:value} of ${3:object}\n		${4:// body...}\n# Range comprehension (inclusive)\nsnippet forr\n	for ${1:name} in [${2:start}..${3:finish}]\n		${4:// body...}\nsnippet forrb\n	for ${1:name} in [${2:start}..${3:finish}] by ${4:step}\n		${5:// body...}\n# Range comprehension (exclusive)\nsnippet forrex\n	for ${1:name} in [${2:start}...${3:finish}]\n		${4:// body...}\nsnippet forrexb\n	for ${1:name} in [${2:start}...${3:finish}] by ${4:step}\n		${5:// body...}\n# Function\nsnippet fun\n	(${1:args}) ->\n		${2:// body...}\n# Function (bound)\nsnippet bfun\n	(${1:args}) =>\n		${2:// body...}\n# Class\nsnippet cla class ..\n	class ${1:`substitute(Filename(), '\\(_\\|^\\)\\(.\\)', '\\u\\2', 'g')`}\n		${2}\nsnippet cla class .. constructor: ..\n	class ${1:`substitute(Filename(), '\\(_\\|^\\)\\(.\\)', '\\u\\2', 'g')`}\n		constructor: (${2:args}) ->\n			${3}\n\n		${4}\nsnippet cla class .. extends ..\n	class ${1:`substitute(Filename(), '\\(_\\|^\\)\\(.\\)', '\\u\\2', 'g')`} extends ${2:ParentClass}\n		${3}\nsnippet cla class .. extends .. constructor: ..\n	class ${1:`substitute(Filename(), '\\(_\\|^\\)\\(.\\)', '\\u\\2', 'g')`} extends ${2:ParentClass}\n		constructor: (${3:args}) ->\n			${4}\n\n		${5}\n# If\nsnippet if\n	if ${1:condition}\n		${2:// body...}\n# If __ Else\nsnippet ife\n	if ${1:condition}\n		${2:// body...}\n	else\n		${3:// body...}\n# Else if\nsnippet elif\n	else if ${1:condition}\n		${2:// body...}\n# Ternary If\nsnippet ifte\n	if ${1:condition} then ${2:value} else ${3:other}\n# Unless\nsnippet unl\n	${1:action} unless ${2:condition}\n# Switch\nsnippet swi\n	switch ${1:object}\n		when ${2:value}\n			${3:// body...}\n\n# Log\nsnippet log\n	console.log ${1}\n# Try __ Catch\nsnippet try\n	try\n		${1}\n	catch ${2:error}\n		${3}\n# Require\nsnippet req\n	${2:$1} = require '${1:sys}'${3}\n# Export\nsnippet exp\n	${1:root} = exports ? this\n#===================\nsnippet dlgalert\n	\\$Dialog.alert(${1:title},${2:info},${3:callback});\nsnippet dlginput\n	\\$Dialog.input(${1:title},${2:callback});\nsnippet docinfo\n	\\$Document.info(${1:extension});\nsnippet doctemp\n	\\$Document.temp(${1:content},${2:extension});\nsnippet editbind\n	\\$Editor.bind(${1:key},${2:callback});\nsnippet editcontent\n	\\$Editor.content()\nsnippet editcontent.\n	\\$Editor.content(${1:value},${2:undoable});\nsnippet editselection\n	\\$Editor.selection()\nsnippet editselection.\n	\\$Editor.selection(${1:value});\nsnippet editoptgutter\n	\\$Editor.option.gutter()\nsnippet editoptgutter.\n	\\$Editor.option.gutter(${1:onoff});\nsnippet editoptprintmargin\n	\\$Editor.option.printMargin()\nsnippet editoptprintmargin.\n	\\$Editor.option.printMargin(${1:onoff});\nsnippet editoptindentguides\n	\\$Editor.option.indentGuides()\nsnippet editoptindentguides.\n	\\$Editor.option.indentGuides(${1:onoff});\nsnippet editoptinvisibles\n	\\$Editor.option.invisibles()\nsnippet editoptinvisibles.\n	\\$Editor.option.invisibles(${1:onoff});\nsnippet editoptsofttabs\n	\\$Editor.option.softTabs()\nsnippet editoptsofttabs.\n	\\$Editor.option.softTabs(${1:onoff});\nsnippet editoptwordwrap\n	\\$Editor.option.wordWrap()\nsnippet editoptwordwrap.\n	\\$Editor.option.wordWrap(${1:onoff});\nsnippet editopttabsize\n	\\$Editor.option.tabSize()\nsnippet editopttabsize.\n	\\$Editor.option.tabSize(${1:size});\nsnippet editoptwraplimit\n	\\$Editor.option.wrapLimit()\nsnippet editoptwraplimit.\n	\\$Editor.option.wrapLimit(${1:limit});\nsnippet ondocchanged\n	@on.documentChanged(()=>\n		${1:# Main routine}\n	);\nsnippet ondocsaved\n	@on.documentSaved(()=>\n		${1:# Main routine}\n	);\nsnippet oncursorchanged\n	@on.cursorChanged(()=>\n		${1:# Main routine}\n	);\nsnippet prevload\n	\\$Preview.load(${1:title},${2:source},${3:base});\nsnippet prevloaddoc\n	\\$Preview.loadDocument(${1:title},${2:content},${3:spec});\nsnippet termshow\n	\\$Terminal.show();\nsnippet termclear\n	\\$Terminal.clear();\nsnippet termecho\n	\\$Terminal.echo(${1:message},${2:attributes});\nsnippet termexec\n	\\$Terminal.exec(${1:args...});\nsnippet termexecsilent\n	\\$Terminal.execSilent(${1:args...});\nsnippet termsetvar\n	\\$Terminal.setVar(${1:variable},${2:value});\nsnippet termwrite\n	\\$Terminal.write(${1:message});\nsnippet termkill\n	\\$Terminal.kill();\nsnippet funinit\n	init:->\n		${1:# Main routine}\nsnippet funrun\n	run:->\n		${1:# Main routine}\nsnippet funhalt\n	halt:->\n		${1:# Main routine}\nsnippet plugin\n	class ${1:PluginName} extends \\$Plugin\n\n		init:->\n			# Initialisation code\n\n\n		run:->\n			# Main code\n\n\n		halt:->\n			# Executed on termination\n\n\n",t.scope="coffee"})