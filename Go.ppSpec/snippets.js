ace.define("ace/snippets/golang",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='# import\nsnippet im\n	import "${1:fmt}"\n# func\nsnippet func\n	func $1($2) $3 {\n		$0\n	}\n# main\nsnippet main\n	func main() {\n		$1\n	}\n# var\nsnippet var\n	var ${1:ok} ${2:bool}$0\n# switch\nsnippet switch\n	switch ${1:var} {\n	case ${2:cond}:\n		$0\n	}\n# Import\nsnippet Im\n	import (\n		"${1:fmt}"\n	)$0\n# type interface\nsnippet tyi\n	type ${1:Name} interface {\n		$0\n	}\n# type struct\nsnippet tys\n	type ${1:Name} struct {\n		$0\n	}\n# for range\nsnippet forr\n	for ${1:index}, ${2:item} := range ${3:list} {\n		$0\n	}\n# if err != nil\nsnippet iferr\n	if err != nil {\n		${1:return}\n	}\n# channel\nsnippet ch\n	chan ${0:int}\n# case\nsnippet cs\n	case ${1:value}:$0\n# const\nsnippet c\n	const ${1:NAME} = ${0:0}\n# defer\nsnippet df\n	defer ${0:func}()\n# interface\nsnippet in\n	interface{}\n# if\nsnippet if\n	if ${1:condition} {\n		$2\n	}\n# else\nsnippet el\n	else {\n		$1\n	}\n# if else\nsnippet ie\n	if ${1:condition} {\n		$2\n	} else {\n		$3\n	}\n	$0\n# for\nsnippet for\n	for ${2:index} := 0; $2 < ${1:count}; $2${3:++} {\n		$4\n	}\n	$0\n# fmt println\nsnippet fp\n	fmt.Println("$1")$0\n# log println\nsnippet lp\n	log.Println("$1")$0\n# make\nsnippet make\n	make(${1:[]string}, ${0:0})\n# map\nsnippet map\n	map[${1:string}]${0:int}\n# new\nsnippet new\n	new(${0:type})\n# panic\nsnippet pn\n	panic("${0:message}")\n# http responsewriter request\nsnippet wr\n	${1:w} http.ResponseWriter, ${2:r} *http.Request\n# handlerfunc\nsnippet hf\n	${1:http}.HandleFunc("${2:/}", ${3:handler})\n	\n# handler\nsnippet hand\n	func ${1:nameHandler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n		$0\n	}\n# http redirect\nsnippet rd\n	http.Redirect(${1:w}, ${2:r}, "${3:/}", ${4:http.StatusFound})\n# http error\nsnippet herr\n	http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})\n# listenandserve\nsnippet las\n	http.ListenAndServe("${1::8080}", ${2:nil})\n# serve\nsnippet sv\n	http.Serve("${1::8080}", ${2:nil})\n# goroutine\nsnippet go\n	go func($1) {\n		$2\n	}($3)\n# goroutine function\nsnippet gf\n	go ${1:func}($0)\n',t.scope="golang"});