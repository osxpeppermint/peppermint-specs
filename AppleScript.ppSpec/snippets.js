ace.define("ace/snippets/applescript",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='# #!/usr/bin/osascript\nsnippet osa\n	#!/usr/bin/osascript\n	\n# Alert\nsnippet alert\n	display alert "${1:alert text}" ¬\n		${2:message "${3:message text}" ¬\n		}${4:as warning}\n# Choose Application(s)\nsnippet choose\n	${1/.+/set /}${1:the_application}${1/.+/ to /}choose application with prompt "${2:Choose an Application:}"${3/.+/ ¬\n		/}${3:with multiple selections allowed}\n	\n# Choose Color\nsnippet choose\n	${1:set the_color to }choose color default color ${2:{65536, 65536, 65536\}}\n	$0\n# Choose File(s)\nsnippet choose\n	${1:set the_file to }choose file with prompt "${2:Pick a file:}"${3: ¬\n		default location path to home folder}${4: ¬\n		with invisibles}${5: ¬\n		with multiple selections allowed}${6: ¬\n		with showing package contents}\n	$0\n# Choose Folder(s)\nsnippet choose\n	${1:set the_folder to }choose folder with prompt "${2:Pick a folder:}"${3: ¬\n		default location path to home folder}${4: ¬\n		with invisibles}${5: ¬\n		with multiple selections allowed}${6: ¬\n		with showing package contents}\n	$0\n# Choose Item from List\nsnippet choose\n	set the_choice to choose from list ${1:{"${2:choices}"\}}\n	$0 \n# Choose New File\nsnippet choose\n	${1:set the_filename to }choose file name with prompt "${2:Name this file:}" ¬\n		default name "${3:untitled}" default location ${4:path to home folder}\n	$0\n# Choose URL\nsnippet choose\n	${1:set the_url to }choose URL showing ${2:Web} servers with editable URL\n	$0\n# OK\nsnippet dialog\n	display dialog ${1:"${2:text}"}${3/.+/ ¬\n		with icon /}${3:1} ¬\n		buttons {"${4:OK}"} ¬\n		default button 1\n	\n# OK/Cancel\nsnippet dialog\n	display dialog ${1:"${2:text}"}${3/.+/ ¬\n		with icon /}${3:1} ¬\n		buttons {"${5:Cancel}", "${4:OK}"} ¬\n		default button "$4"\n	set button_pressed to button returned of result\n	if button_pressed is "$4" then\n		${6:-- statements for default button}${7/.+/\n	else\n		/}${7:-- statements for cancel button}\n	end if\n	\n# OK/Cancel/Other\nsnippet dialog\n	display dialog ${1:"${2:text}"}${3/.+/ ¬\n		with icon /}${3:1} ¬\n		buttons {"${5:Cancel}", "${6:Other}", "${4:OK}"} ¬\n		default button "$4"\n	set button_pressed to button returned of result\n	if button_pressed is "$4" then\n		${7:-- statements for default button}${8/.+/\n	else if button_pressed is "$5" then\n		/}${8:-- statements for cancel button}${9/.+/\n	else\n		/}${9:-- statements for other button}\n	end if\n	\n# Text Field\nsnippet dialog\n	display dialog ${1:"${2:text}"} ¬\n		default answer ${3:"${4:default answer}"}${5/.+/ ¬\n		with icon /}${5:1} ¬\n		buttons {"${7:Cancel}", "${6:OK}"} ¬\n		default button "$6"\n	set button_pressed to button returned of result\n	set text_typed to text returned of result\n	if button_pressed is "$6" then\n		${8:-- statements for default button}${9/.+/\n	else\n		/}${9:-- statements for cancel button}\n	end if\n# change text item delimiters\nsnippet delim\n	set oldDelims to AppleScript\'s text item delimiters\n	set AppleScript\'s text item delimiters to {"${1:,}"}\n	${0:-- statements}\n	set AppleScript\'s text item delimiters to oldDelims\n# considering … end\nsnippet con\n	considering ${1:case}\n		${0:-- statements}\n	end considering\n# copy … to …\nsnippet copy\n	copy ${1:value} to ${0:location}\n# do shell script …\nsnippet shell\n	${1/.+/set /}${1:shell_output}${1/.+/ to /}do shell script${2/.+/ ¬\n		/}${2:"${3:script}"}${4/.+/ ¬\n		/}${4:without altering line endings}\n	\n# duplicate … to …\nsnippet dup\n	duplicate ${1:value} to ${0:location}\n# if … end\nsnippet if\n	if ${1:condition} then\n		${0:-- statements}\n	end if\n# if … then …\nsnippet iff\n	if ${1:condition} then ${0:value}\n# ignoring … end\nsnippet ign\n	ignoring ${1:application responses}\n		${0:-- statements}\n	end ignoring\n# prop parent …\nsnippet parent\n	property parent : ${1:application "${2:Finder}"}\n# prop …\nsnippet prop\n	property ${1:prop_name} : ${0:value}\n# repeat [times] … end\nsnippet rep\n	repeat${1/.+/ /}${1:number}${1/.+/ times/}\n		${0:-- statements}\n	end repeat\n# repeat until ... end\nsnippet rep\n	repeat until ${1:condition}\n		${0:-- statements}\n	end repeat\n# repeat while ... end\nsnippet rep\n	repeat while ${1:condition}\n		${0:-- statements}\n	end repeat\n# repeat with ... from ... end\nsnippet rep\n	repeat with ${1:counter} from ${2:start} to ${3:stop}${4/.+/ by /}${4:step}\n		${0:-- statements}\n	end repeat\n# repeat with ... in ... end\nsnippet rep\n	repeat with ${1:item} in ${2:list}\n		${0:-- statements}\n	end repeat\n# script … end\nsnippet script\n	script ${1:script_object}\n		on run\n			${0:-- statements}\n		end run\n	end script\n# set … to …\nsnippet set\n	set ${1:var_name} to ${0:value}\n# tell [app] … end\nsnippet tell\n	tell ${1:application "${2:Finder}"}\n		${0:-- statements}\n	end tell\n# try … on error … end\nsnippet try\n	try\n		${1:-- statements}\n	on error\n		${2:-- error handling}\n	end try\n# using terms from [app] … end\nsnippet terms\n	using terms from ${1:application "${2:Finder}"}\n		${0:-- statements}\n	end using terms from\n# with timeout … end\nsnippet timeout\n	with timeout ${1:number} seconds\n		${0:-- statements}\n	end timeout\n# with transaction … end\nsnippet transaction\n	with transaction${1/.+/ /}${1:session}\n		${0:-- statements}\n	end transaction\n',t.scope="applescript"});