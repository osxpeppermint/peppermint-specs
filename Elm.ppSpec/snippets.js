ace.define("ace/snippets/elm",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='# abs : number -> number\nsnippet abs\n	abs ${1:number}\n# all : (a -> Bool) -> [a] -> Bool\nsnippet all\n	all ${1:function} ${2:list}\n# and : [Bool] -> Bool\nsnippet and\n	and ${1:list}\n# asin : Float -> Float\nsnippet asin\n	asin ${1:float}\n# atan : Float -> Float\nsnippet atan\n	atan ${1:float}\n# black : Color\nsnippet black\n	black\n# bold : Text -> Text\nsnippet bold\n	bold ${1:text}\n# ceiling : Float -> Int\nsnippet ceiling\n	ceiling ${1:float}\n# charcoal : Color\nsnippet charcoal\n	charcoal\n# color : Color -> Text -> Text\nsnippet color\n	color ${1:color} ${2:text}\n# compare : comparable -> comparable -> Order\nsnippet compare\n	compare ${1:comparable} ${2:comparable}\n# concat : [appendable] -> appendable\nsnippet concat\n	concat ${1:list}\n# cons : Maybe a -> [a] -> [a]\nsnippet cons\n	cons ${1:maybe} ${2:list}\n# cos : Float -> Float\nsnippet cos\n	cos ${1:float}\n# countIf : (a -> Bool) -> Signal a -> Signal Int\nsnippet countIf\n	countIf ${1:function} ${2:signal}\n# darkBlue : Color\nsnippet darkBlue\n	darkBlue\n# darkCharcoal : Color\nsnippet darkCharcoal\n	darkCharcoal\n# darkGreen : Color\nsnippet darkGreen\n	darkGreen\n# darkOrange : Color\nsnippet darkOrange\n	darkOrange\n# darkRed : Color\nsnippet darkRed\n	darkRed\n# defaultStyle : Style\nsnippet defaultStyle\n	defaultStyle\n# delay : Time -> Signal a -> Signal a\nsnippet delay\n	delay ${1:time} ${2:signal}\n# drop : Int -> [a] -> [a]\nsnippet drop\n	drop ${1:int} ${2:list}\n# dropRepeats : Signal a -> Signal a\nsnippet dropRepeats\n	dropRepeats ${1:signal}\n# e : Float\nsnippet e\n	e\n# filter : (a -> Bool) -> [a] -> [a]\nsnippet filter\n	filter ${1:function} ${2:list}\n# floor : Float -> Int\nsnippet floor\n	floor ${1:float}\n# foldl1 : (a -> a -> a) -> [a] -> a\nsnippet foldl1\n	foldl1 ${1:function} ${2:list}\n# foldr : (a -> b -> b) -> b -> [a] -> b\nsnippet foldr\n	foldr ${1:function} ${2:b} ${3:list}\n# fps : number -> Signal Time\nsnippet fps\n	fps ${1:number}\n# fromPolar : (Float,Float) -> (Float,Float)\nsnippet fromPolar\n	fromPolar ${1:tuple}\n# gray : Color\nsnippet gray\n	gray\n# green : Color\nsnippet green\n	green\n# greyscale : Float -> Color\nsnippet greyscale\n	greyscale ${1:float}\n# height : Float -> Text -> Text\nsnippet height\n	height ${1:float} ${2:text}\n# hsv : Float -> Float -> Float -> Color\nsnippet hsv\n	hsv ${1:float} ${2:float} ${3:float}\n# id : a -> a\nsnippet id\n	id ${1:a}\n# inMilliseconds : Time -> Float\nsnippet inMilliseconds\n	inMilliseconds ${1:time}\n# inSeconds : Time -> Float\nsnippet inSeconds\n	inSeconds ${1:time}\n# isEmpty : [a] -> Bool\nsnippet isEmpty\n	isEmpty ${1:list}\n# isJust : Maybe a -> Bool\nsnippet isJust\n	isJust ${1:maybe}\n# isNothing : Maybe a -> Bool\nsnippet isNothing\n	isNothing ${1:maybe}\n# join : appendable -> [appendable] -> appendable\nsnippet join\n	join ${1:appendable} ${2:list}\n# justs : [Maybe a] -> [a]\nsnippet justs\n	justs ${1:list}\n# keepWhen : Signal Bool -> a -> Signal a -> Signal a\nsnippet keepWhen\n	keepWhen ${1:signal} ${2:a} ${3:signal}\n# leftAligned : Text -> Element\nsnippet leftAligned\n	leftAligned ${1:text}\n# lift : (a -> b) -> Signal a -> Signal b\nsnippet lift\n	lift ${1:function} ${2:signal}\n# lift3 : (a -> b -> c -> d) -> Signal a -> Signal b -> Signal c -> Signal d\nsnippet lift3\n	lift3 ${1:function} ${2:signal} ${3:signal} ${4:signal}\n# lift5: (a -> b -> c -> d -> e -> f) -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f\nsnippet lift5\n	lift5 ${1:function} ${2:signal} ${3:signal} ${4:signal} ${5:signal} ${6:signal}\n# lift7 : (a -> b -> c -> d -> e -> f -> g -> h)\n      -> Signal a -> Signal b -> Signal c -> Signal d -> Signal e -> Signal f -> Signal g -> Signal h\nsnippet lift7\n	lift7 ${1:function} ${2:signal} ${3:signal} ${4:signal} ${5:signal} ${6:signal} ${7:signal} ${8:signal}\n# lightBlue : Color\nsnippet lightBlue\n	lightBlue\n# lightCharcoal : Color\nsnippet lightCharcoal\n	lightCharcoal\n# lightGreen : Color\nsnippet lightGreen\n	lightGreen\n# lightOrange : Color\nsnippet lightOrange\n	lightOrange\n# lightRed : Color\nsnippet lightRed\n	lightRed\n# line : Line -> Text -> Text\nsnippet line\n	line ${1:line} ${2:text}\n# link : String -> Text -> Text\nsnippet link\n	link ${1:string} ${2:text}\n# map : (a -> b) -> [a] -> [b]\nsnippet map\n	map ${1:function} ${2:list}\n# max :  comparable -> comparable -> comparable\nsnippet max\n	max ${1:comparable} ${2:comparable}\n# maybe : b -> (a -> b) -> Maybe a -> b\nsnippet maybe\n	maybe ${1:b} ${2:function} ${3:maybe}\n# merges : [Signal a] -> Signal a\nsnippet merges\n	merges ${1:list}\n# min : comparable -> comparable -> comparable\nsnippet min\n	min ${1:comparable} ${2:comparable}\n# minute : Time\nsnippet minute\n	minute\n# monospace : Text -> Text\nsnippet monospace\n	monospace ${1:text}\n# or : [Bool] -> Bool\nsnippet or\n	or ${1:list}\n# otherwise : Bool\nsnippet otherwise\n	otherwise\n# pi : Float\nsnippet pi\n	pi\n# product : [number] -> number\nsnippet product\n	product ${1:list}\n# radial : (number,number) -> number -> (number,number) -> number -> [(Float,Color)] -> Gradient\nsnippet radial\n	radial ${1:tuple} ${2:number} ${3:tuple} ${4:number} ${5:list}\n# red : Color\nsnippet red\n	red\n# repeat : Int -> a -> [a]\nsnippet repeat\n	repeat ${1:int} ${2:a}\n# rgb : Int -> Int -> Int -> Color\nsnippet rgb\n	rgb ${1:int} ${2:int} ${3:int}\n# rightAligned : Text -> Element\nsnippet rightAligned\n	rightAligned ${1:text}\n# sampleOn : Signal a -> Signal b -> Signal b\nsnippet sampleOn\n	sampleOn ${1:signal} ${2:signal}\n# scanl1 : (a -> a -> a) -> [a] -> [a]\nsnippet scanl1\n	scanl1 ${1:function} ${2:list}\n# sin : Float -> Float\nsnippet sin\n	sin ${1:float}\n# snd : (a,b) -> b\nsnippet snd\n	snd ${1:tuple}\n# sortBy : (a -> comparable) ->  [a] -> [a]\nsnippet sortBy\n	sortBy ${1:function} ${2:list}\n# sqrt : number -> number\nsnippet sqrt\n	sqrt ${1:number}\n# sum : [number] -> number\nsnippet sum\n	sum ${1:list}\n# take : Int -> [a] -> [a]\nsnippet take\n	take ${1:int} ${2:list}\n# timestamp : Signal a -> Signal (Time, a)\nsnippet timestamp\n	timestamp ${1:signal}\n# toPolar : (Float,Float) -> (Float,Float)\nsnippet toPolar\n	toPolar ${1:tuple}\n# truncate : Float -> Int\nsnippet truncate\n	truncate ${1:float}\n# typeface : [String] -> Text -> Text\nsnippet typeface\n	typeface ${1:list} ${2:text}\n# unzip : [(a,b)] -> ([a],[b])\nsnippet unzip\n	unzip ${1:list}\n# xor : Bool -> Bool -> Bool\nsnippet xor\n	xor ${1:bool} ${2:bool}\n# zip : [a] -> [b] -> [(a,b)]\nsnippet zip\n	zip ${1:list} ${2:list}\n',t.scope="elm"});