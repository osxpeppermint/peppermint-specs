ace.define("ace/snippets/rails",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='# Table column binary\nsnippet tcbi\n	t.binary :${1:title}${2:, :limit => ${3:2}.megabytes}\n	$0\n# Table column boolean\nsnippet tcb\n	t.boolean :${1:title}\n	$0\n# Table column date\nsnippet tcda\n	t.date :${1:title}\n	$0\n# Table column datetime\nsnippet tcdt\n	t.datetime :${1:title}\n	$0\n# Table column decimal\nsnippet tcd\n	t.decimal :${1:title}${2:${3:, :precision => ${4:10}}${5:, :scale => ${6:2}}}\n	$0\n# Table column float\nsnippet tcf\n	t.float :${1:title}\n	$0\n# Table column integer\nsnippet tci\n	t.integer :${1:title}\n	$0\n# Table column lock_version\nsnippet tcl\n	t.integer :lock_version, :null => false, :default => 0\n	$0\n# Table column(s) references\nsnippet tcr\n	t.references :${1:taggable}${2:, :polymorphic => ${3:{ :default => \'${4:Photo}\' \}}}\n	$0\n# Table column string\nsnippet tcs\n	t.string :${1:title}\n	$0\n# Table column text\nsnippet tct\n	t.text :${1:title}\n	$0\n# Table column time\nsnippet tcti\n	t.time :${1:title}\n	$0\n# Table column timestamp\nsnippet tcts\n	t.timestamp :${1:title}\n	$0\n# Table column timestamps\nsnippet tctss\n	t.timestamps\n	$0\n# t.binary (tcbi)\nsnippet t.\n	t.binary :${1:title}${2:, :limit => ${3:2}.megabytes}\n	t.$0\n# t.boolean (tcb)\nsnippet t.\n	t.boolean :${1:title}\n	t.$0\n# t.date (tcda)\nsnippet t.\n	t.date :${1:title}\n	t.$0\n# t.datetime (tcdt)\nsnippet t.\n	t.datetime :${1:title}\n	t.$0\n# t.decimal (tcd)\nsnippet t.\n	t.decimal :${1:title}${2:${3:, :precision => ${4:10}}${5:, :scale => ${6:2}}}\n	t.$0\n# t.float (tcf)\nsnippet t.\n	t.float :${1:title}\n	t.$0\n# t.integer (tci)\nsnippet t.\n	t.integer :${1:title}\n	t.$0\n# t.lock_version (tcl)\nsnippet t.\n	t.integer :lock_version, :null => false, :default => 0\n	t.$0\n# t.references (tcr)\nsnippet t.\n	t.references :${1:taggable}${2:, :polymorphic => ${3:{ :default => \'${4:Photo}\' \}}}\n	t.$0\n# t.string (tcs)\nsnippet t.\n	t.string :${1:title}\n	t.$0\n# t.text (tct)\nsnippet t.\n	t.text :${1:title}\n	t.$0\n# t.time (tcti)\nsnippet t.\n	t.time :${1:title}\n	t.$0\n# t.timestamp (tcts)\nsnippet t.\n	t.timestamp :${1:title}\n	t.$0\n# t.timestamps (tctss)\nsnippet t.\n	t.timestamps\n	t.$0\n# assert(var = assigns(:var))\nsnippet asg\n	assert(${1:var} = assigns(:${1}), "Cannot find @${1}")\n	$0\n# assert_difference\nsnippet asd\n	assert_difference "${1:Model}.${2:count}", ${3:+1} do\n	  $0\n	end\n# assert_no_difference\nsnippet asnd\n	assert_no_difference "${1:Model}.${2:count}" do\n	  $0\n	end\n# Create Column in Table\nsnippet mcol\n	t.column ${1:title}, :${2:string}\n	$0\n# Create Several Columns in Table\nsnippet mccc\n	t.column ${1:title}, :${2:string}\n	mccc$0\n# Rails.logger.debug\nsnippet deb\n	Rails.logger.debug "${1:message}"\n# assert_redirected_to\nsnippet asrt\n	assert_redirected_to ${2::action => "${1:index}"}\n# assert_response\nsnippet asre\n	assert_response :${1:success}${2:, @response.body}$0\n# accepts_nested_attributes_for\nsnippet anaf\n	accepts_nested_attributes_for :${1:association_name}${2:${3:, :allow_destroy => true}${4:, :reject_if => proc { |obj| ${5:obj.blank?} \}}}\n	\n# after_create\nsnippet aftc\n	after_create \n# after_destroy\nsnippet aftd\n	after_destroy \n# after_save\nsnippet afts\n	after_save \n# after_update\nsnippet aftu\n	after_update \n# alias_attribute\nsnippet alias\n	alias_attribute :${1:new_name}, :${2:old_name}\n# assert_redirected_to (nested path plural)\nsnippet asrt\n	assert_redirected_to ${10:${2:parent}_${3:child}_path(${4:@}${5:${2}})}\n# assert_redirected_to (nested path)\nsnippet asrt\n	assert_redirected_to ${2:${12:parent}_${13:child}_path(${14:@}${15:${12}}, ${16:@}${17:${13}})}\n# assert_redirected_to (path plural)\nsnippet asrt\n	assert_redirected_to ${10:${2:model}s_path}\n# assert_redirected_to (path)\nsnippet asrt\n	assert_redirected_to ${2:${12:model}_path(${13:@}${14:${12}})}\n# assert_rjs\nsnippet asrj\n	assert_rjs :${1:replace}, ${2:"${3:dom id}"}\n# assert_select\nsnippet ass\n	assert_select \'${1:path}\'${2:, :${3:text} => ${4:\'${5:inner_html}\'}}${6: do\n		$0\n	end}\n# before_action\nsnippet ba\n	before_action :${1:method}${2:${3:, :only => ${4:[:${5:action}, :${6:action}]}}${7:, :except => ${8:[:${9:action}, :${10:action}]}}}\n# before_create\nsnippet befc\n	before_create \n# before_destroy\nsnippet befd\n	before_destroy \n# before_filter\nsnippet bf\n	before_filter :${1:method}${2:${3:, :only => ${4:[:${5:action}, :${6:action}]}}${7:, :except => ${8:[:${9:action}, :${10:action}]}}}\n# before_save\nsnippet befs\n	before_save \n# before_update\nsnippet befu\n	before_update \n# caches_action\nsnippet cache\n	caches_action :${1:action}\n# cattr_accessor\nsnippet crw\n	cattr_accessor :${0:attr_names}\n# find(:all)\nsnippet fina\n	find(:all${1:, :conditions => [\'${2:${3:field} = ?}\', ${5:true}]})\n# find(:first)\nsnippet finf\n	find(:first${1:, :conditions => [\'${2:${3:field} = ?}\', ${5:true}]})\n# find(:last)\nsnippet finl\n	find(:last${1:, :conditions => [\'${2:${3:field} = ?}\', ${5:true}]})\n# find(id)\nsnippet fini\n	find(${1:id})\n# find_each\nsnippet fine\n	find_each(${1::conditions => {:${2:field} => ${3:true}\}}) do |$1|\n		$0\n	end\n# find_in_batches\nsnippet finb\n	find_in_batches(${1::conditions => {:${2:field} => ${3:true}\}}) do |$1s|\n		$4s.each do |$4|\n			$0\n		end\n	end\n# gem :git\nsnippet gemg\n	gem \'${1:paperclip}\', :git => "${2:git://github.com/thoughtbot/paperclip.git}"${3:, :branch => "${4:rails3}"}\n# gem\nsnippet gem\n	gem \'${1:name}\'${2:${3:, "${4:1.0}"}${5:${6:, :require => ${7:"${8:$1}"}}${9:, :group => :${10:test}}}}\n# layout\nsnippet layout\n	layout "${1:template_name}"${2:${3:, :only => ${4:[:${5:action}, :${6:action}]}}${7:, :except => ${8:[:${9:action}, :${10:action}]}}}\n# logger.debug\nsnippet logd\n	${1:Rails.}logger.debug { "${2:message}" }$0\n# logger.error\nsnippet loge\n	logger.error { "${1:message}" }$0\n# logger.fatal\nsnippet logf\n	logger.fatal { "${1:message}" }$0\n# logger.info\nsnippet logi\n	logger.info { "${1:message}" }$0\n# logger.warn\nsnippet logw\n	logger.warn { "${1:message}" }$0\n# map(&:sym_proc)\nsnippet mp\n	map(&:${1:id})\n# mattr_accessor\nsnippet mrw\n	mattr_accessor :${0:attr_names}\n# flash[â€¦]\nsnippet flash\n	flash[:${1:notice}] = "${2:Successfully created...}"$0\n# redirect_to (action)\nsnippet rea\n	redirect_to :action => "${1:index}"\n# redirect_to (action, id)\nsnippet reai\n	redirect_to :action => "${1:show}", :id => ${0:@item}\n# redirect_to (controller)\nsnippet rec\n	redirect_to :controller => "${1:items}"\n# redirect_to (controller, action)\nsnippet reca\n	redirect_to :controller => "${1:items}", :action => "${2:list}"\n# redirect_to (controller, action, id)\nsnippet recai\n	redirect_to :controller => "${1:items}", :action => "${2:show}", :id => ${0:@item}\n# redirect_to (nested path plural)\nsnippet renpp\n	redirect_to(${2:${10:parent}_${11:child}_path(${12:@}${13:${10}})})\n# redirect_to (nested path)\nsnippet renp\n	redirect_to(${2:${12:parent}_${13:child}_path(${14:@}${15:${12}}, ${16:@}${17:${13}})})\n# redirect_to (path plural)\nsnippet repp\n	redirect_to(${2:${10:model}s_path})\n# redirect_to (path)\nsnippet rep\n	redirect_to(${2:${12:model}_path(${13:@}${14:${12}})})\n# redirect_to :back\nsnippet reb\n	redirect_to :back\n# render (action)\nsnippet ra\n	render :action => "${1:action}"\n# render (action, layout)\nsnippet ral\n	render :action => "${1:action}", :layout => "${2:layoutname}"\n# render (file)\nsnippet rf\n	render :file => "${1:filepath}"\n# render (file, use_full_path)\nsnippet rfu\n	render :file => "${1:filepath}", :use_full_path => ${2:false}\n# render (inline)\nsnippet ri\n	render :inline => "${1:<%= \'hello\' %>}"\n# render (inline, locals)\nsnippet ril\n	render :inline => "${1:<%= \'hello\' %>}", :locals => { ${2::name} => "${3:value}"$4 }\n# render (inline, type)\nsnippet rit\n	render :inline => "${1:<%= \'hello\' %>}", :type => ${2::rxml}\n# render (layout)\nsnippet rl\n	render :layout => "${1:layoutname}"\n# render (nothing)\nsnippet rn\n	render :nothing => ${1:true}\n# render (nothing, status)\nsnippet rns\n	render :nothing => ${1:true}, :status => ${2:401}\n# render (text)\nsnippet rt\n	render :text => "${1:text to render...}"\n# render (text, layout)\nsnippet rtl\n	render :text => "${1:text to render...}", :layout => "${2:layoutname}"\n# render (text, layout => true)\nsnippet rtlt\n	render :text => "${1:text to render...}", :layout => ${2:true}\n# render (text, status)\nsnippet rts\n	render :text => "${1:text to render...}", :status => ${2:401}\n# render (update)\nsnippet ru\n	render :update do |${2:page}|\n		$2.$0\n	end\n# scoped_by\nsnippet sb\n	scoped_by_${1:attribute}(${2:id})\n# setup do..end\nsnippet setup\n	setup do\n		$0\n	end\n# test do..end\nsnippet test\n	test "${1:something interesting}" do\n		$0\n	end\n# validates_acceptance_of if\nsnippet vaoif\n	validates_acceptance_of :${1:terms}${2:${3:, :accept => "${4:1}"}${5:, :message => "${6:You must accept the terms of service}"}}, :if => proc { |obj| ${7:obj.condition?} }}\n# validates_acceptance_of\nsnippet vao\n	validates_acceptance_of :${1:terms}${2:${3:, :accept => "${4:1}"}${5:, :message => "${6:You must accept the terms of service}"}}\n# validates_associated\nsnippet va\n	validates_associated :${1:attribute}${2:, :on => :${3:create}}\n# validates_associated if\nsnippet vaif\n	validates_associated :${1:attribute}${2:, :on => :${3:create}, :if => proc { |obj| ${5:obj.condition?} }}\n# validates_confirmation_of\nsnippet vc\n	validates_confirmation_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:should match confirmation}"}\n# validates_confirmation_of if\nsnippet vcif\n	validates_confirmation_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:should match confirmation}", :if => proc { |obj| ${5:obj.condition?} }}\n# validates_exclusion_of\nsnippet ve\n	validates_exclusion_of :${1:attribute}${2:, :in => ${3:%w( ${4:mov avi} )}, :on => :${5:create}, :message => "${6:extension %s is not allowed}"}\n# validates_exclusion_of if\nsnippet veif\n	validates_exclusion_of :${1:attribute}${2:, :in => ${3:%w( ${4:mov avi} )}, :on => :${5:create}, :message => "${6:extension %s is not allowed}"}, :if => proc { |obj| ${7:obj.condition?} }}\n# validates_format_of if\nsnippet vfif\n	validates_format_of :${1:attribute}, :with => /${2:^[${3:\w\d}]+\$}/${4:, :on => :${5:create}, :message => "${6:is invalid}"}, :if => proc { |obj| ${7:obj.condition?} }}\n# validates_format_of\nsnippet vf\n	validates_format_of :${1:attribute}, :with => /${2:^[${3:\w\d}]+\$}/${4:, :on => :${5:create}, :message => "${6:is invalid}"}\n# validates_inclusion_of if\nsnippet viif\n	validates_inclusion_of :${1:attribute}${2:, :in => ${3:%w( ${4:mov avi} )}, :on => :${5:create}, :message => "${6:extension %s is not included in the list}"}, :if => proc { |obj| ${7:obj.condition?} }}\n# validates_inclusion_of\nsnippet vi\n	validates_inclusion_of :${1:attribute}${2:, :in => ${3:%w( ${4:mov avi} )}, :on => :${5:create}, :message => "${6:extension %s is not included in the list}"}\n# validates_length_of\nsnippet vl\n	validates_length_of :${1:attribute}, :within => ${2:3..20}${3:, :on => :${4:create}, :message => "${5:must be present}"}\n# validates_length_of if\nsnippet vlif\n	validates_length_of :${1:attribute}, :within => ${2:3..20}${3:, :on => :${4:create}, :message => "${5:must be present}"}, :if => proc { |obj| ${6:obj.condition?} }}\n# validates_numericality_of if\nsnippet vnif\n	validates_numericality_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:is not a number}"}, :if => proc { |obj| ${5:obj.condition?} }}\n# validates_numericality_of\nsnippet vn\n	validates_numericality_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:is not a number}"}\n# validates_presence_of\nsnippet vp\n	validates_presence_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:can\'t be blank}"}\n# validates_presence_of if\nsnippet vpif\n	validates_presence_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:can\'t be blank}"}, :if => proc { |obj| ${5:obj.condition?} }\n# validates_uniqueness_of\nsnippet vu\n	validates_uniqueness_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:must be unique}"}\n# validates_uniqueness_of if\nsnippet vuif\n	validates_uniqueness_of :${1:attribute}${2:, :on => :${3:create}, :message => "${4:must be unique}", :if => proc { |obj| ${6:obj.condition?} }}\n# verify â€” render\nsnippet verify\n	verify :only => [:$1], :method => :post, :render => {:status => 500, :text => "use HTTP-POST"}\n	\n# verify â€” redirect\nsnippet verify\n	verify :only => [:$1], :session => :user, :params => :id, :redirect_to => {:action => \'${2:index}\'}\n	\n# xhr delete\nsnippet xdelete\n	xhr :delete, :${1:destroy}, :id => ${2:1}$0\n# xhr get\nsnippet xget\n	xhr :get, :${1:show}${2:, :id => ${3:1}}$0\n# xhr post\nsnippet xpost\n	xhr :post, :${1:create}, :${2:object} => { $3 }\n# xhr put\nsnippet xput\n	xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { $4 }$0\n# Table column(s) change\nsnippet tch\n	t.change :${1:name}${2:, :${3:string}${4:, :${5:limit} => ${6:80}}}\n	$0\n# Table column(s) rename\nsnippet tre\n	t.rename :${1:old_column_name}, :${2:new_column_name}\n	$0\n# t.change (tch)\nsnippet t.\n	t.change :${1:name}${2:, :${3:string}${4:, :${5:limit} => ${6:80}}}\n	t.$0\n# t.rename (tre)\nsnippet t.\n	t.rename :${1:old_column_name}, :${2:new_column_name}\n	t.$0\n# after_validation\nsnippet aftv\n	after_validation :${1:field}${2:, :on => :${3:create|update}${4:${5:, :allow_blank => true}${6:, :allow_nil => true}}}$0\n# before_validation\nsnippet befv\n	before_validation :${1:field}${2:, :on => :${3:create|update}${4:${5:, :allow_blank => true}${6:, :allow_nil => true}}}$0\n# belongs_to\nsnippet bt\n	belongs_to :${1:object}${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}\n# default_scope\nsnippet dscope\n	default_scope ${1:order(${2:\'${3:created_at DESC}\'})}\n# has_and_belongs_to_many\nsnippet habtm\n	has_and_belongs_to_many :${1:object}${2:, :join_table => "${3:table_name}", :foreign_key => "${4:${1}_id}"}\n# has_many\nsnippet hm\n	has_many :${1:object}s${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}\n# has_many (through)\nsnippet hmt\n	has_many :${1:objects}, :through => :${2:join_association}${3:, :source => :${4:${2}_table_foreign_key_to_${1}_table}}\n# has_many :dependent => :destroy\nsnippet hmd\n	has_many :${1:object}s${2:, :class_name => "${1}", :foreign_key => "${4:reference}_id"}, :dependent => :destroy$0\n# has_one\nsnippet ho\n	has_one :${1:object}${2:, :class_name => "${1}", :dependent => :destroy}\n# has_one (through)\nsnippet hot\n	has_one :${1:object}, :through => :${2:join_association}${3:, :source => :${4:${2}_table_foreign_key_to_${1}_table}}\n# scope lambda\nsnippet scopel\n	scope :${1:name}, lambda { |${2:param}| ${3:where(${4::${5:field} => ${6:"${7:value}"}})} }\n# scope with extension\nsnippet scopee\n	scope :${1:name}, ${2:where(${3::${4:field} => ${5:\'${6:value}\'}})} do\n	  def ${7:method_name}\n	    $0\n	  end\n	end\n# scope\nsnippet scope\n	scope :${1:name}, ${2:joins(:${3:table}).}where(${4:\'${5:$3.${6:field}} = ?\', ${7:\'${8:value}\'}})\n# content_for\nsnippet conf\n	<% content_for :${1:yield_label_in_layout} do -%>\n		$0\n	<% end -%>\n# else (ERB)\nsnippet else\n	<% else %>\n	  \n# end (ERB)\nsnippet end\n	<% end %>\n# for loop in rhtml\nsnippet for\n	<% if !${1:list}.blank? %>\n	  <% for ${2:item} in ${1} %>\n	    $3\n	  <% end %>\n	<% else %>\n	  $4\n	<% end %>\n	\n# if (ERB)\nsnippet if\n	<% if ${1:condition} %>\n	  $0\n	<% end %>\n# format (respond_with)\nsnippet format\n	format.${1:html|xml|json|js|any} { $0 }\n# respond_to\nsnippet rest\n	respond_to :${1:html}${2:, :${3:xml}${4:, :${5:json}}}$0\n# respond_with\nsnippet resw\n	respond_with(${1:@${2:model}})${3: do |format|\n	  format.${4:html} { $0 \}\n	end}\n# params\nsnippet p\n	params[:${1:id}]$0\n# session\nsnippet sess\n	session[:${1:user}]$0\n# get :on => :member\nsnippet get\n	get \'${1:recent}\'${2:, :on => :${3:member}}\n# get :on => :collection\nsnippet get\n	get \'${1:recent}\'${2:, :on => :${3:collection}}\n# map.catch_all\nsnippet mapca\n	${1:map}.catch_all "*${2:anything}", :controller => "${3:default}", :action => "${4:error}"\n	\n# map.named_route\nsnippet map\n	${1:map}.${2:connect} \'${3::controller/:action/:id}\'\n# map.resource\nsnippet mapr\n	${1:map}.resource :${2:resource}${10: do |${11:$2}|\n	  $0\n	end}\n# map.resources\nsnippet maprs\n	${1:map}.resources :${2:resource}${10: do |${11:$2}|\n	  $0\n	end}\n# map.with_options\nsnippet mapwo\n	${1:map}.with_options :${2:controller} => \'${3:thing}\' do |${4:$3}|\n		$0\n	end\n	\n# member routes\nsnippet member\n	member do\n	  ${1:get :${2:action}}\n	  ${3:put :${4:action}}\n	  ${5:post :${6:action}}\n	  ${7:delete :${8:action}}\n	end\n# collection routes\nsnippet col\n	collection do\n	  ${1:get :${2:action}}\n	  ${3:put :${4:action}}\n	  ${5:post :${6:action}}\n	  ${7:delete :${8:action}}\n	end\n# resources\nsnippet res\n	resources :${1:posts}${2: do\n	  $3\n	end}\n# page.hide (*ids)\nsnippet hide\n	page.hide ${1:"${2:id(s)}"}\n# page.insert_html (position, id, partial)\nsnippet ins\n	page.insert_html :${1:top}, ${2:"${3:id}"}, :${4:partial => "${5:template}"}\n# page.replace (id, partial)\nsnippet rep\n	page.replace ${1:"${2:id}"}, :${3:partial => "${4:template}"}\n# page.replace_html (id, partial)\nsnippet reph\n	page.replace_html ${1:"${2:id}"}, :${3:partial => "${4:template}"}\n# page.show (*ids)\nsnippet show\n	page.show ${1:"${2:id(s)}"}\n# page.toggle (*ids)\nsnippet tog\n	page.toggle ${1:"${2:id(s)}"}\n# page.visual_effect (effect, id)\nsnippet vis\n	page.visual_effect :${1:toggle_slide}, ${2:"${3:DOM ID}"}\n# erb_render_block\nsnippet =\n	<%= $1 %>\n# erb_exec_block\nsnippet -\n	<% $1 %>\n# erb_loop_block\nsnippet =loop\n	<% $1.each do |$2| %>\n		<%= $3 %>\n	<% end %>\n	$4\n# link_to\nsnippet lt\n	<%= link_to "${1:name}", ${2:path} %>\n# render (partial)\nsnippet rp\n	render :partial => "${1:item}"\n# render (partial, collection)\nsnippet rpc\n	render :partial => "${1:item}", :collection => ${2:@$1s}\n# render (partial, locals)\nsnippet rpl\n	render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}$0 }\n# render (partial, object)\nsnippet rpo\n	render :partial => "${1:item}", :object => ${2:@$1}\n# render (partial, status)\nsnippet rps\n	render :partial => "${1:item}", :status => ${2:500}\n',t.scope="rails"});