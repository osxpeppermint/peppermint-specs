ace.define("ace/snippets/openfl",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='# hxml --altfmt\nsnippet alt\n	--altfmt\n# hxml --auto-xml\nsnippet ax\n	--auto-xml\n# hxml --display\nsnippet dis\n	--display\n# hxml --flash-strict\nsnippet fs\n	--flash-strict\n# hxml --flash-use-stage\nsnippet fus\n	--flash-use-stage\n# hxml --gen-hx-classes\nsnippet ghc\n	--gen-hx-classes ${1:file}\n# hxml --help\nsnippet h\n	--help\n# hxml --neko-source\nsnippet ns\n	--neko-source\n# hxml --next\nsnippet n\n	--next\n# hxml --no-inline\nsnippet no\n	--no-inline\n# hxml --no-output\nsnippet no\n	--no-output\n# hxml --no-traces\nsnippet nt\n	--no-traces\n# hxml --times\nsnippet t\n	--times\n# hxml -D\nsnippet d\n	-D ${1:var}\n# hxml -as3\nsnippet as3\n	-as3 ${1:directory}\n# hxml -cmd\nsnippet cm\n	-cmd ${1:command}\n# hxml -cp\nsnippet cp\n	-cp ${1:path}\n# hxml -debug\nsnippet deb\n	-debug\n# hxml -exclude\nsnippet ex\n	-exclude ${1:file}\n# hxml -help\nsnippet h\n	-help\n# hxml -js\nsnippet js\n	-js ${1:file}.js\n# hxml -lib\nsnippet lib\n	-lib ${1:lib_name}\n# hxml -main\nsnippet main\n	-main ${1:main_class}\n# hxml -neko\nsnippet neko\n	-neko ${1:file}.n\n# hxml -prompt\nsnippet pr\n	-prompt\n# hxml -resource\nsnippet res\n	-resource ${1:file}@${2:name}\n# hxml -swf-header\nsnippet swf\n	-swf-header ${1:width}:${2:height}:${3:fps}:${4:color}\n# hxml -swf-lib\nsnippet swf\n	-swf-lib ${1:file}\n# hxml -swf-version\nsnippet swf\n	-swf-version ${1:version}\n# hxml -swf\nsnippet swf\n	-swf ${1:file}.swf\n# hxml -v\nsnippet v\n	-v\n# hxml -x\nsnippet x\n	-x ${1:file}.n\n# hxml -xml\nsnippet xml\n	-xml ${1:file}\n# openfl library copyright\nsnippet (c)\n	/*\n	 * Copyright (c) 2010, The openfl Project Contributors\n	 * All rights reserved.\n	 * Redistribution and use in source and binary forms, with or without\n	 * modification, are permitted provided that the following conditions are met:\n	 *\n	 *   - Redistributions of source code must retain the above copyright\n	 *     notice, this list of conditions and the following disclaimer.\n	 *   - Redistributions in binary form must reproduce the above copyright\n	 *     notice, this list of conditions and the following disclaimer in the\n	 *     documentation and/or other materials provided with the distribution.\n	 *\n	 * THIS SOFTWARE IS PROVIDED BY THE openfl PROJECT CONTRIBUTORS "AS IS" AND ANY\n	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n	 * DISCLAIMED. IN NO EVENT SHALL THE openfl PROJECT CONTRIBUTORS BE LIABLE FOR\n	 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n	 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n	 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n	 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n	 * DAMAGE.\n	 */\n	\n# main class\nsnippet class\n	class ${1:Class}\n	{\n	\n		public function new()\n		{\n			$0\n		}\n	\n		public static function main()\n		{\n			new ${2:Class}();\n		}\n	}\n# trace\nsnippet tr\n	trace($1);$0\n# trace with description\nsnippet trace\n	trace(\'"$1" => ${Std.string($2)}\');$0\n# #if\nsnippet #\n	#if \n# #else\nsnippet #e\n	#else \n# #else error\nsnippet #error\n	#else error\n	\n# try\nsnippet try\n	try{\n		$0\n	}catch ( ${1:error:Dynamic} ){\n		trace(\'Error: $error\');\n	}\n# catch\nsnippet catch\n	catch ( ${1:error } ) {\n		${2:expression}\}\n# do..while\nsnippet do\n	do {\n		$0\n	} while ( ${1:condition} );\n# continue\nsnippet co\n	continue;\n# break\nsnippet br\n	break;\n# if\nsnippet if\n	if ( ${1:condition} ) {\n		$0\n	}\n# else\nsnippet else\n	else {\n		$0\n	}\n# else..if\nsnippet elseif\n	else if ( ${1:condition} ) {\n		$0\n	}\n# if..else\nsnippet ifelse\n	if ( ${1:condition} ) {\n		${2:expression}\n	} else {\n		${3:expression}\n	}\n# switch\nsnippet switch\n	switch ( $1 ) {\n		case $2:\n			$0\n	}\n	\n# case\nsnippet case\n	case ${1:expression}:\n		${2:statement}\n	\n# default\nsnippet def\n	default :\n		${1:statement}\n# return\nsnippet ret\n	return $1;$0\n# block comment\nsnippet /**\n	/**\n	 *  $0\n	 **/\n# package\nsnippet pack\n	package $1;$0\n# class\nsnippet cl\n	class ${1:Class} ${2:extends ${3:SuperClass}} ${4:implements ${5:Interface}} \n	{\n	\n		public function new()\n		{\n			${6:super();\n			}$0\n		}\n	}\n# enum\nsnippet en\n	enum ${1:Name}\n	{\n		$0\n	}\n# extern\nsnippet ex\n	extern \n# import\nsnippet im\n	import ${1:package};$0\n# interface\nsnippet in\n	interface ${1:Interface} ${2:extends ${3:Parent} }\n	{\n		$0\n	}\n# macro class\nsnippet macro\n	@:macro class ${1:Class}\n	{\n		public static function ${2:main}(){\n			$0\n		}\n	}\n# macro function\nsnippet mac\n	@:macro public static function ${1:name}(${2:e:openfl.macro.Expr}) : openfl.macro.Expr\n	{\n		$0\n	}\n# for var in 0...end\nsnippet fori\n	for ( ${1:var} in ${2:0}...${3:end} ) {\n		${4:expression}\n	}\n# for in\nsnippet for\n	for ( $1 in $2 ) {\n		$0\n	}\n# main\nsnippet main\n	public static function main() : Void \n	{\n		$0\n	}\n# function\nsnippet fn\n	function ${1:name} ( ${2:params} )${3: : ${4:Void}}\n	{\n		$0\n	}\n# method\nsnippet fun\n	${1:private }${2:public }${3:static }${4:inline }function ${5:name} ($6)${7: : ${8:Void}}\n	{\n		$0\n	}\n# private\nsnippet pr\n	private \n# public\nsnippet p\n	public \n# inline\nsnippet i\n	inline \n# static\nsnippet s\n	static \n# private function\nsnippet prf\n	private function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# private inline function\nsnippet prif\n	private inline function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# private static function\nsnippet prsf\n	private static function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# private static inline function\nsnippet prsif\n	private static inline function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# public function\nsnippet pf\n	public function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# public inline function\nsnippet pif\n	public inline function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# public static function\nsnippet psf\n	public static function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# public static inline function\nsnippet psif\n	public static inline function ${1:name}($2)${3: : ${4:Void}}\n	{\n		$0\n	}\n	\n# autotyped variable\nsnippet v\n	var ${1:name} ${2:: ${3:Type}}${4: = }$5;$0\n# typed variable\nsnippet var\n	var $1:${2:Type} ${3:= }$4;$0\n# private variable\nsnippet prv\n	private var $1 ${2:: ${3:Type}};$0\n# private static variable\nsnippet prsv\n	private static var $1 ${2:: ${3:Type}};$0\n# private static inline variable\nsnippet prsiv\n	private static inline var $1 ${2:: ${3:Type}} = $4;$0\n# public variable\nsnippet pv\n	public var $1 ${2:: ${3:Type}};$0\n# public static variable\nsnippet psv\n	public static var $1 ${2:: ${3:Type}};$0\n# public static inline variable\nsnippet psiv\n	public static inline var $1 ${2:: ${3:Type}} = $4;$0\nsnippet add\n	add(${1:args})\nsnippet addChild\n	addChild(${1:args})\nsnippet addChildAt\n	addChildAt(${1:args})\nsnippet addEventListener\n	addEventListener(${1:args})\nsnippet addHeader\n	addHeader(${1:args})\nsnippet addTileRect\n	addTileRect(${1:args})\nsnippet append\n	append(${1:args})\nsnippet appendRotation\n	appendRotation(${1:args})\nsnippet appendScale\n	appendScale(${1:args})\nsnippet appendText\n	appendText(${1:args})\nsnippet appendTranslation\n	appendTranslation(${1:args})\nsnippet applyFilter\n	applyFilter(${1:args})\nsnippet areInaccessibleObjectsUnderPoint\n	areInaccessibleObjectsUnderPoint(${1:args})\nsnippet assemble\n	assemble(${1:args})\nsnippet attachNetStream\n	attachNetStream(${1:args})\nsnippet beginBitmapFill\n	beginBitmapFill(${1:args})\nsnippet beginFill\n	beginFill(${1:args})\nsnippet beginGradientFill\n	beginGradientFill(${1:args})\nsnippet clear\n	clear(${1:args})\nsnippet clone\n	clone(${1:args})\nsnippet close\n	close(${1:args})\nsnippet colorTransform\n	colorTransform(${1:args})\nsnippet concat\n	concat(${1:args})\nsnippet configureBackBuffer\n	configureBackBuffer(${1:args})\nsnippet connect\n	connect(${1:args})\nsnippet connectWithProto\n	connectWithProto(${1:args})\nsnippet contains\n	contains(${1:args})\nsnippet containsPoint\n	containsPoint(${1:args})\nsnippet containsRect\n	containsRect(${1:args})\nsnippet copy\n	copy(${1:args})\nsnippet copyChannel\n	copyChannel(${1:args})\nsnippet copyColumnFrom\n	copyColumnFrom(${1:args})\nsnippet copyColumnTo\n	copyColumnTo(${1:args})\nsnippet copyFrom\n	copyFrom(${1:args})\nsnippet copyPixels\n	copyPixels(${1:args})\nsnippet copyRawDataFrom\n	copyRawDataFrom(${1:args})\nsnippet copyRawDataTo\n	copyRawDataTo(${1:args})\nsnippet copyRowFrom\n	copyRowFrom(${1:args})\nsnippet copyRowTo\n	copyRowTo(${1:args})\nsnippet copyToMatrix\n	copyToMatrix(${1:args})\nsnippet createBox\n	createBox(${1:args})\nsnippet createCubeTexture\n	createCubeTexture(${1:args})\nsnippet createGradientBox\n	createGradientBox(${1:args})\nsnippet createIndexBuffer\n	createIndexBuffer(${1:args})\nsnippet createProgram\n	createProgram(${1:args})\nsnippet createRectangleTexture\n	createRectangleTexture(${1:args})\nsnippet createTexture\n	createTexture(${1:args})\nsnippet createVertexBuffer\n	createVertexBuffer(${1:args})\nsnippet crossProduct\n	crossProduct(${1:args})\nsnippet cubicCurveTo\n	cubicCurveTo(${1:args})\nsnippet curveTo\n	curveTo(${1:args})\nsnippet decode\n	decode(${1:args})\nsnippet decompose\n	decompose(${1:args})\nsnippet decrementBy\n	decrementBy(${1:args})\nsnippet deltaTransformPoint\n	deltaTransformPoint(${1:args})\nsnippet deltaTransformVector\n	deltaTransformVector(${1:args})\nsnippet dispatchEvent\n	dispatchEvent(${1:args})\nsnippet dispose\n	dispose(${1:args})\nsnippet dotProduct\n	dotProduct(${1:args})\nsnippet draw\n	draw(${1:args})\nsnippet drawCircle\n	drawCircle(${1:args})\nsnippet drawEllipse\n	drawEllipse(${1:args})\nsnippet drawGraphicsData\n	drawGraphicsData(${1:args})\nsnippet drawPath\n	drawPath(${1:args})\nsnippet drawRect\n	drawRect(${1:args})\nsnippet drawRoundRect\n	drawRoundRect(${1:args})\nsnippet drawRoundRectComplex\n	drawRoundRectComplex(${1:args})\nsnippet drawTiles\n	drawTiles(${1:args})\nsnippet drawToBitmapData\n	drawToBitmapData(${1:args})\nsnippet drawTriangles\n	drawTriangles(${1:args})\nsnippet emitDest\n	emitDest(${1:args})\nsnippet emitHeader\n	emitHeader(${1:args})\nsnippet emitOpcode\n	emitOpcode(${1:args})\nsnippet emitSampler\n	emitSampler(${1:args})\nsnippet emitSource\n	emitSource(${1:args})\nsnippet emitZeroDword\n	emitZeroDword(${1:args})\nsnippet emitZeroQword\n	emitZeroQword(${1:args})\nsnippet encode\n	encode(${1:args})\nsnippet endFill\n	endFill(${1:args})\nsnippet equals\n	equals(${1:args})\nsnippet fillRect\n	fillRect(${1:args})\nsnippet floodFill\n	floodFill(${1:args})\nsnippet flush\n	flush(${1:args})\nsnippet formatRequestHeaders\n	formatRequestHeaders(${1:args})\nsnippet fromArray\n	fromArray(${1:args})\nsnippet fromBytes\n	fromBytes(${1:args})\nsnippet fromHaxeVector\n	fromHaxeVector(${1:args})\nsnippet fromInt\n	fromInt(${1:args})\nsnippet fromVectorData\n	fromVectorData(${1:args})\nsnippet generateFilterRect\n	generateFilterRect(${1:args})\nsnippet get\n	get(${1:args})\nsnippet getBitmapData\n	getBitmapData(${1:args})\nsnippet getBounds\n	getBounds(${1:args})\nsnippet getBuffer\n	getBuffer(${1:args})\nsnippet getByteBuffer\n	getByteBuffer(${1:args})\nsnippet getCachedSamples\n	getCachedSamples(${1:args})\nsnippet getCharBoundaries\n	getCharBoundaries(${1:args})\nsnippet getCharIndexAtPoint\n	getCharIndexAtPoint(${1:args})\nsnippet getChildAt\n	getChildAt(${1:args})\nsnippet getChildByName\n	getChildByName(${1:args})\nsnippet getChildIndex\n	getChildIndex(${1:args})\nsnippet getColorBoundsRect\n	getColorBoundsRect(${1:args})\nsnippet getControlAt\n	getControlAt(${1:args})\nsnippet getDefinition\n	getDefinition(${1:args})\nsnippet getDuration\n	getDuration(${1:args})\nsnippet getFont\n	getFont(${1:args})\nsnippet getGroupMatches\n	getGroupMatches(${1:args})\nsnippet getLength\n	getLength(${1:args})\nsnippet getLineIndexAtPoint\n	getLineIndexAtPoint(${1:args})\nsnippet getLineMetrics\n	getLineMetrics(${1:args})\nsnippet getLineOffset\n	getLineOffset(${1:args})\nsnippet getLineText\n	getLineText(${1:args})\nsnippet getMatches\n	getMatches(${1:args})\nsnippet getMovieClip\n	getMovieClip(${1:args})\nsnippet getMusic\n	getMusic(${1:args})\nsnippet getMute\n	getMute(${1:args})\nsnippet getObjectsUnderPoint\n	getObjectsUnderPoint(${1:args})\nsnippet getPan\n	getPan(${1:args})\nsnippet getPixel\n	getPixel(${1:args})\nsnippet getPixels\n	getPixels(${1:args})\nsnippet getPosition\n	getPosition(${1:args})\nsnippet getRect\n	getRect(${1:args})\nsnippet getSound\n	getSound(${1:args})\nsnippet getStackTrace\n	getStackTrace(${1:args})\nsnippet getStart\n	getStart(${1:args})\nsnippet getSurface\n	getSurface(${1:args})\nsnippet getTextFormat\n	getTextFormat(${1:args})\nsnippet getTexture\n	getTexture(${1:args})\nsnippet getTileCenter\n	getTileCenter(${1:args})\nsnippet getTileRect\n	getTileRect(${1:args})\nsnippet getTileUVs\n	getTileUVs(${1:args})\nsnippet getVector\n	getVector(${1:args})\nsnippet getVolume\n	getVolume(${1:args})\nsnippet globalToLocal\n	globalToLocal(${1:args})\nsnippet gotoAndPlay\n	gotoAndPlay(${1:args})\nsnippet gotoAndStop\n	gotoAndStop(${1:args})\nsnippet hasBitmapData\n	hasBitmapData(${1:args})\nsnippet hasDefinition\n	hasDefinition(${1:args})\nsnippet hasEventListener\n	hasEventListener(${1:args})\nsnippet hasFont\n	hasFont(${1:args})\nsnippet hasGlyph\n	hasGlyph(${1:args})\nsnippet hasNext\n	hasNext(${1:args})\nsnippet hasSound\n	hasSound(${1:args})\nsnippet histogram\n	histogram(${1:args})\nsnippet hitTest\n	hitTest(${1:args})\nsnippet hitTestObject\n	hitTestObject(${1:args})\nsnippet hitTestPoint\n	hitTestPoint(${1:args})\nsnippet identity\n	identity(${1:args})\nsnippet incrementBy\n	incrementBy(${1:args})\nsnippet indexOf\n	indexOf(${1:args})\nsnippet inflate\n	inflate(${1:args})\nsnippet inflatePoint\n	inflatePoint(${1:args})\nsnippet init\n	init(${1:args})\nsnippet interpolateTo\n	interpolateTo(${1:args})\nsnippet intersection\n	intersection(${1:args})\nsnippet intersects\n	intersects(${1:args})\nsnippet invalidate\n	invalidate(${1:args})\nsnippet invert\n	invert(${1:args})\nsnippet isDefaultPrevented\n	isDefaultPrevented(${1:args})\nsnippet isEmpty\n	isEmpty(${1:args})\nsnippet iterator\n	iterator(${1:args})\nsnippet join\n	join(${1:args})\nsnippet lastIndexOf\n	lastIndexOf(${1:args})\nsnippet lineBitmapStyle\n	lineBitmapStyle(${1:args})\nsnippet lineGradientStyle\n	lineGradientStyle(${1:args})\nsnippet lineStyle\n	lineStyle(${1:args})\nsnippet lineTo\n	lineTo(${1:args})\nsnippet load\n	load(${1:args})\nsnippet loadBytes\n	loadBytes(${1:args})\nsnippet loadCompressedDataFromByteArray\n	loadCompressedDataFromByteArray(${1:args})\nsnippet loadMovieClip\n	loadMovieClip(${1:args})\nsnippet loadMusic\n	loadMusic(${1:args})\nsnippet loadPCMFromByteArray\n	loadPCMFromByteArray(${1:args})\nsnippet loadSound\n	loadSound(${1:args})\nsnippet localToGlobal\n	localToGlobal(${1:args})\nsnippet lock\n	lock(${1:args})\nsnippet match\n	match(${1:args})\nsnippet merge\n	merge(${1:args})\nsnippet moveTo\n	moveTo(${1:args})\nsnippet mult\n	mult(${1:args})\nsnippet mute\n	mute(${1:args})\nsnippet nearEquals\n	nearEquals(${1:args})\nsnippet negate\n	negate(${1:args})\nsnippet new\n	new(${1:args})\nsnippet next\n	next(${1:args})\nsnippet nextFrame\n	nextFrame(${1:args})\nsnippet noise\n	noise(${1:args})\nsnippet normalize\n	normalize(${1:args})\nsnippet off\n	off(${1:args})\nsnippet offset\n	offset(${1:args})\nsnippet offsetPoint\n	offsetPoint(${1:args})\nsnippet on\n	on(${1:args})\nsnippet onGamepadAxisMove\n	onGamepadAxisMove(${1:args})\nsnippet onGamepadButtonDown\n	onGamepadButtonDown(${1:args})\nsnippet onGamepadButtonUp\n	onGamepadButtonUp(${1:args})\nsnippet onGamepadConnect\n	onGamepadConnect(${1:args})\nsnippet onGamepadDisconnect\n	onGamepadDisconnect(${1:args})\nsnippet onInit\n	onInit(${1:args})\nsnippet onKeyDown\n	onKeyDown(${1:args})\nsnippet onKeyUp\n	onKeyUp(${1:args})\nsnippet onLoaded\n	onLoaded(${1:args})\nsnippet onMouseDown\n	onMouseDown(${1:args})\nsnippet onMouseMove\n	onMouseMove(${1:args})\nsnippet onMouseMoveRelative\n	onMouseMoveRelative(${1:args})\nsnippet onMouseUp\n	onMouseUp(${1:args})\nsnippet onMouseWheel\n	onMouseWheel(${1:args})\nsnippet onRenderContextLost\n	onRenderContextLost(${1:args})\nsnippet onRenderContextRestored\n	onRenderContextRestored(${1:args})\nsnippet onTextEdit\n	onTextEdit(${1:args})\nsnippet onTextInput\n	onTextInput(${1:args})\nsnippet onTouchEnd\n	onTouchEnd(${1:args})\nsnippet onTouchMove\n	onTouchMove(${1:args})\nsnippet onTouchStart\n	onTouchStart(${1:args})\nsnippet onUpdate\n	onUpdate(${1:args})\nsnippet onWindowActivate\n	onWindowActivate(${1:args})\nsnippet onWindowClose\n	onWindowClose(${1:args})\nsnippet onWindowDeactivate\n	onWindowDeactivate(${1:args})\nsnippet onWindowEnter\n	onWindowEnter(${1:args})\nsnippet onWindowFocusIn\n	onWindowFocusIn(${1:args})\nsnippet onWindowFocusOut\n	onWindowFocusOut(${1:args})\nsnippet onWindowFullscreen\n	onWindowFullscreen(${1:args})\nsnippet onWindowLeave\n	onWindowLeave(${1:args})\nsnippet onWindowMinimize\n	onWindowMinimize(${1:args})\nsnippet onWindowMove\n	onWindowMove(${1:args})\nsnippet onWindowResize\n	onWindowResize(${1:args})\nsnippet onWindowRestore\n	onWindowRestore(${1:args})\nsnippet paletteMap\n	paletteMap(${1:args})\nsnippet pause\n	pause(${1:args})\nsnippet perlinNoise\n	perlinNoise(${1:args})\nsnippet play\n	play(${1:args})\nsnippet pointAt\n	pointAt(${1:args})\nsnippet pop\n	pop(${1:args})\nsnippet prepend\n	prepend(${1:args})\nsnippet prependRotation\n	prependRotation(${1:args})\nsnippet prependScale\n	prependScale(${1:args})\nsnippet prependTranslation\n	prependTranslation(${1:args})\nsnippet present\n	present(${1:args})\nsnippet preventDefault\n	preventDefault(${1:args})\nsnippet prevFrame\n	prevFrame(${1:args})\nsnippet project\n	project(${1:args})\nsnippet push\n	push(${1:args})\nsnippet readBoolean\n	readBoolean(${1:args})\nsnippet readByte\n	readByte(${1:args})\nsnippet readBytes\n	readBytes(${1:args})\nsnippet readDouble\n	readDouble(${1:args})\nsnippet readFloat\n	readFloat(${1:args})\nsnippet readInt\n	readInt(${1:args})\nsnippet readMultiByte\n	readMultiByte(${1:args})\nsnippet readObject\n	readObject(${1:args})\nsnippet readShort\n	readShort(${1:args})\nsnippet readUnsignedByte\n	readUnsignedByte(${1:args})\nsnippet readUnsignedInt\n	readUnsignedInt(${1:args})\nsnippet readUnsignedShort\n	readUnsignedShort(${1:args})\nsnippet readUTF\n	readUTF(${1:args})\nsnippet readUTFBytes\n	readUTFBytes(${1:args})\nsnippet recompose\n	recompose(${1:args})\nsnippet removeAllEventListeners\n	removeAllEventListeners(${1:args})\nsnippet removeBitmapData\n	removeBitmapData(${1:args})\nsnippet removeChild\n	removeChild(${1:args})\nsnippet removeChildAt\n	removeChildAt(${1:args})\nsnippet removeChildren\n	removeChildren(${1:args})\nsnippet removeEventListener\n	removeEventListener(${1:args})\nsnippet removeFont\n	removeFont(${1:args})\nsnippet removeRenderMethod\n	removeRenderMethod(${1:args})\nsnippet removeSound\n	removeSound(${1:args})\nsnippet render\n	render(${1:args})\nsnippet requestContext\n	requestContext(${1:args})\nsnippet requestSoftKeyboard\n	requestSoftKeyboard(${1:args})\nsnippet requestVideoStatus\n	requestVideoStatus(${1:args})\nsnippet reset\n	reset(${1:args})\nsnippet resume\n	resume(${1:args})\nsnippet reverse\n	reverse(${1:args})\nsnippet rotate\n	rotate(${1:args})\nsnippet scale\n	scale(${1:args})\nsnippet scaleBy\n	scaleBy(${1:args})\nsnippet scroll\n	scroll(${1:args})\nsnippet seek\n	seek(${1:args})\nsnippet send\n	send(${1:args})\nsnippet set\n	set(${1:args})\nsnippet setBitmapData\n	setBitmapData(${1:args})\nsnippet setBlendFactors\n	setBlendFactors(${1:args})\nsnippet setChildIndex\n	setChildIndex(${1:args})\nsnippet setColorMask\n	setColorMask(${1:args})\nsnippet setCulling\n	setCulling(${1:args})\nsnippet setDepthTest\n	setDepthTest(${1:args})\nsnippet setEmpty\n	setEmpty(${1:args})\nsnippet setFont\n	setFont(${1:args})\nsnippet setGLSLProgramConstantsFromByteArray\n	setGLSLProgramConstantsFromByteArray(${1:args})\nsnippet setGLSLProgramConstantsFromMatrix\n	setGLSLProgramConstantsFromMatrix(${1:args})\nsnippet setGLSLProgramConstantsFromVector\n	setGLSLProgramConstantsFromVector(${1:args})\nsnippet setGLSLTextureAt\n	setGLSLTextureAt(${1:args})\nsnippet setGLSLVertexBufferAt\n	setGLSLVertexBufferAt(${1:args})\nsnippet setMute\n	setMute(${1:args})\nsnippet setPan\n	setPan(${1:args})\nsnippet setPixel\n	setPixel(${1:args})\nsnippet setPixels\n	setPixels(${1:args})\nsnippet setPosition\n	setPosition(${1:args})\nsnippet setProgram\n	setProgram(${1:args})\nsnippet setProgramConstantsFromByteArray\n	setProgramConstantsFromByteArray(${1:args})\nsnippet setProgramConstantsFromMatrix\n	setProgramConstantsFromMatrix(${1:args})\nsnippet setProgramConstantsFromVector\n	setProgramConstantsFromVector(${1:args})\nsnippet setProperty\n	setProperty(${1:args})\nsnippet setRenderMethod\n	setRenderMethod(${1:args})\nsnippet setRenderToBackBuffer\n	setRenderToBackBuffer(${1:args})\nsnippet setRenderToTexture\n	setRenderToTexture(${1:args})\nsnippet setRequestedUpdateInterval\n	setRequestedUpdateInterval(${1:args})\nsnippet setSamplerStateAt\n	setSamplerStateAt(${1:args})\nsnippet setScissorRectangle\n	setScissorRectangle(${1:args})\nsnippet setSelection\n	setSelection(${1:args})\nsnippet setSound\n	setSound(${1:args})\nsnippet setStencilActions\n	setStencilActions(${1:args})\nsnippet setStencilReferenceValue\n	setStencilReferenceValue(${1:args})\nsnippet setTextFormat\n	setTextFormat(${1:args})\nsnippet setTextureAt\n	setTextureAt(${1:args})\nsnippet setTo\n	setTo(${1:args})\nsnippet setVector\n	setVector(${1:args})\nsnippet setVertexBufferAt\n	setVertexBufferAt(${1:args})\nsnippet setVolume\n	setVolume(${1:args})\nsnippet shift\n	shift(${1:args})\nsnippet slice\n	slice(${1:args})\nsnippet sort\n	sort(${1:args})\nsnippet splice\n	splice(${1:args})\nsnippet start\n	start(${1:args})\nsnippet startCachingSamples\n	startCachingSamples(${1:args})\nsnippet startDrag\n	startDrag(${1:args})\nsnippet stop\n	stop(${1:args})\nsnippet stopCachingSamples\n	stopCachingSamples(${1:args})\nsnippet stopDrag\n	stopDrag(${1:args})\nsnippet stopImmediatePropagation\n	stopImmediatePropagation(${1:args})\nsnippet stopPropagation\n	stopPropagation(${1:args})\nsnippet stringToMask\n	stringToMask(${1:args})\nsnippet stringToSwizzle\n	stringToSwizzle(${1:args})\nsnippet subtract\n	subtract(${1:args})\nsnippet swapChildren\n	swapChildren(${1:args})\nsnippet swapChildrenAt\n	swapChildrenAt(${1:args})\nsnippet threshold\n	threshold(${1:args})\nsnippet to\n	to(${1:args})\nsnippet toArray\n	toArray(${1:args})\nsnippet togglePause\n	togglePause(${1:args})\nsnippet toHaxeVector\n	toHaxeVector(${1:args})\nsnippet toInt\n	toInt(${1:args})\nsnippet toMatrix\n	toMatrix(${1:args})\nsnippet toMozString\n	toMozString(${1:args})\nsnippet toString\n	toString(${1:args})\nsnippet toVectorData\n	toVectorData(${1:args})\nsnippet transform\n	transform(${1:args})\nsnippet transformPoint\n	transformPoint(${1:args})\nsnippet transformVector\n	transformVector(${1:args})\nsnippet transformVectors\n	transformVectors(${1:args})\nsnippet translate\n	translate(${1:args})\nsnippet transpose\n	transpose(${1:args})\nsnippet uncompress\n	uncompress(${1:args})\nsnippet union\n	union(${1:args})\nsnippet unload\n	unload(${1:args})\nsnippet unloadAndStop\n	unloadAndStop(${1:args})\nsnippet unlock\n	unlock(${1:args})\nsnippet unshift\n	unshift(${1:args})\nsnippet update\n	update(${1:args})\nsnippet updateAfterEvent\n	updateAfterEvent(${1:args})\nsnippet upload\n	upload(${1:args})\nsnippet uploadFromByteArray\n	uploadFromByteArray(${1:args})\nsnippet uploadFromFloat\n	uploadFromFloat(${1:args})\nsnippet uploadFromVector\n	uploadFromVector(${1:args})\nsnippet wideLineTo\n	wideLineTo(${1:args})\nsnippet wideMoveTo\n	wideMoveTo(${1:args})\nsnippet willTrigger\n	willTrigger(${1:args})\nsnippet writeBoolean\n	writeBoolean(${1:args})\nsnippet writeByte\n	writeByte(${1:args})\nsnippet writeBytes\n	writeBytes(${1:args})\nsnippet writeDouble\n	writeDouble(${1:args})\nsnippet writeFloat\n	writeFloat(${1:args})\nsnippet writeInt\n	writeInt(${1:args})\nsnippet writeMultiByte\n	writeMultiByte(${1:args})\nsnippet writeObject\n	writeObject(${1:args})\nsnippet writeShort\n	writeShort(${1:args})\nsnippet writeUnsignedInt\n	writeUnsignedInt(${1:args})\nsnippet writeUnsignedShort\n	writeUnsignedShort(${1:args})\nsnippet writeUTF\n	writeUTF(${1:args})\nsnippet writeUTFBytes\n	writeUTFBytes(${1:args})\n',t.scope="openfl"});